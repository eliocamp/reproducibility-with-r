<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Day 1 on An R reproducibility toolkit for the practical researcher</title>
    <link>https://eliocamp.github.io/reproducibility-with-r/materials/day1/</link>
    <description>Recent content in Day 1 on An R reproducibility toolkit for the practical researcher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 15 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://eliocamp.github.io/reproducibility-with-r/materials/day1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01: What is repdoducibilty anyway?</title>
      <link>https://eliocamp.github.io/reproducibility-with-r/materials/day1/01-introduction/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eliocamp.github.io/reproducibility-with-r/materials/day1/01-introduction/</guid>
      <description>This workshop will introduce some useful tools to help you write code that can be run anywhere with consistent results. We will focus on the practical aspects of reproducibility, but it&amp;rsquo;s still worth it to get some sense of what is reproducibility and what&amp;rsquo;s its aim.
What reproducibility is and what it is not     We will use &amp;ldquo;reproducibility&amp;rdquo; to talk about results that can be obtained by someone else given the same data and code.</description>
    </item>
    
    <item>
      <title>02: A tidy project is a happy project</title>
      <link>https://eliocamp.github.io/reproducibility-with-r/materials/day1/02-projects/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eliocamp.github.io/reproducibility-with-r/materials/day1/02-projects/</guid>
      <description>Imagine that you read some interesting paper or analysis. To your delight, all the code and data is available in a public repository. You then are itching to sink your teeth on it; to see how they implemented the methods, or to run it with your own similar data.
You download the all the files and you find something like this.
/home/dorothy/Documents/paper ├── abstract.R ├── correlation.png ├── data.csv ├── data2.csv ├── fig1.</description>
    </item>
    
    <item>
      <title>03: Reporting with RMarkdown</title>
      <link>https://eliocamp.github.io/reproducibility-with-r/materials/day1/03-rmarkdown/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eliocamp.github.io/reproducibility-with-r/materials/day1/03-rmarkdown/</guid>
      <description>RMarkdown files     An RMarkdown file is a plain text file, with some rules and special syntax that allow us to write code and text together. When it is &amp;ldquo;knitted,&amp;rdquo; the code will be evaluated and executed and the text formatted so that it creates a reproducible report or document that is nice to read and contains all your work.
This is really critical to reproducibility. It also saves us time and can help with automation tasks.</description>
    </item>
    
    <item>
      <title>04: here are the portable paths</title>
      <link>https://eliocamp.github.io/reproducibility-with-r/materials/day1/04-here/</link>
      <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://eliocamp.github.io/reproducibility-with-r/materials/day1/04-here/</guid>
      <description>If you use RStudio Projects consistently, you can be sure that your working directory is always the root of the project unless you actively change it. Almost. There are two situations in which this assumption can be broken and that can lead to errors or, even worse, surprising results.
Root directory during knit     One issue is that when RMarkdown files are knitted, the working directory in which the code is executed is the location of the .</description>
    </item>
    
  </channel>
</rss>
